{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["origData","Search","value","onKeyPress","onChange","children","type","className","maxLength","autoFocus","placeholder","Content","data","Object","entries","map","k","v","key","App","useState","search","setSearch","setData","e","target","newData","newText","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","href","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"u+BAWMA,G,YAmDN,IAAMC,EAA0B,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,MAAOC,EAAqC,EAArCA,WAAYC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAC9D,OACE,2BACEC,KAAK,SACLC,UAAU,SACVL,MAAOA,EACPC,WAAYA,EACZC,SAAUA,EACVI,UAAW,EACXC,WAAW,EACXC,YAAaL,KAKbM,EAAwB,SAACC,GAC7B,OACE,oCACGC,OAAOC,QAAQF,GAAMG,KAAI,mCAAEC,EAAF,KAAKC,EAAL,YACxB,yBAAKC,IAAKF,EAAGT,UAAU,QACpBS,GAAK,0BAAMT,UAAU,QAAQS,GAC9B,8BAAOC,SAOFE,EA7Ef,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACEC,EADF,OAEWF,mBAASpB,GAFpB,mBAENY,EAFM,KAEAW,EAFA,KAyBb,OACE,yBAAKhB,UAAU,OACb,gCACE,kBAAC,EAAD,CACEL,MAAOmB,EACPlB,WA1BqC,WAC3CmB,EAAU,KA0BJlB,SAvBmD,SAACoB,GAC1D,IAAMtB,EAAQsB,EAAEC,OAAOvB,MAEvB,GADAoB,EAAUpB,GACNA,EAAO,CACT,IAAMwB,EAAoB,GACpBC,EAAU3B,EAASE,GACrByB,EACFD,EAAQxB,GAASyB,EAEjBD,EAAQ,IAAM,8BAEhBH,EAAQG,QAERH,EAAQvB,KAON,WAQF,8BACE,kBAAC,EAAYY,MCtCDgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,yBAAK5B,UAAU,eACb,uBAAGA,UAAU,OAAO6B,KAAK,6CAAzB,WAIF,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD4HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.111ff562.chunk.js","sourcesContent":["import React, {\n  useState,\n  FC,\n  KeyboardEventHandler,\n  ChangeEventHandler,\n} from 'react';\nimport './App.css';\nimport json from './data.json';\n\ntype DataType = { [index: string]: string };\n\nconst origData: DataType = json;\n\nfunction App() {\n  const [search, setSearch] = useState('');\n  const [data, setData] = useState(origData);\n\n  const handleKeyPress: KeyboardEventHandler = () => {\n    setSearch('');\n  };\n\n  const handleChange: ChangeEventHandler<HTMLInputElement> = (e) => {\n    const value = e.target.value;\n    setSearch(value);\n    if (value) {\n      const newData: DataType = {};\n      const newText = origData[value];\n      if (newText) {\n        newData[value] = newText;\n      } else {\n        newData[''] = \"It's not a punctuation mark\";\n      }\n      setData(newData);\n    } else {\n      setData(origData);\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      <header>\n        <Search\n          value={search}\n          onKeyPress={handleKeyPress}\n          onChange={handleChange}\n        >\n          search\n        </Search>\n      </header>\n      <main>\n        <Content {...data} />\n      </main>\n    </div>\n  );\n}\n\ntype SearchProps = {\n  value: string;\n  onKeyPress: KeyboardEventHandler;\n  onChange: ChangeEventHandler<HTMLInputElement>;\n};\n\nconst Search: FC<SearchProps> = ({ value, onKeyPress, onChange, children }) => {\n  return (\n    <input\n      type=\"search\"\n      className=\"search\"\n      value={value}\n      onKeyPress={onKeyPress}\n      onChange={onChange}\n      maxLength={1}\n      autoFocus={true}\n      placeholder={children as string}\n    />\n  );\n};\n\nconst Content: FC<DataType> = (data) => {\n  return (\n    <>\n      {Object.entries(data).map(([k, v]) => (\n        <div key={k} className=\"line\">\n          {k && <span className=\"mark\">{k}</span>}\n          <span>{v}</span>\n        </div>\n      ))}\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <nav className=\"align-right\">\n      <a className=\"link\" href=\"https://github.com/hioz/punctuation-marks\">\n        Github\n      </a>\n    </nav>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}